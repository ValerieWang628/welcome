{"version":3,"sources":["Avatar.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Text","Typography","collapsedRowStyle","margin","imageRowStyle","iconRowStyle","marginTop","marginBottom","gridColumns","textRowStyle","iconStyle","color","fontSize","textStyle","fontsize","textAlign","icons","github","linkedin","youtube","instagram","Avatar","props","collapsed","Container","className","Row","style","Image","src","roundedCircle","Array","from","Object","entries","entry","Col","type","theme","onClick","link","window","open","Header","Layout","Content","Footer","Sider","SubMenu","Menu","App","useState","_setCollapse","minHeight","onCollapse","console","log","defaultSelectedKeys","mode","Item","key","title","background","padding","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5b7ff94.chunk.js","sourcesContent":["import React from 'react';\nimport Image from 'react-bootstrap/Image';\nimport { Icon, Typography } from 'antd';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { onClickOpenLinkInNewTab } from './utils';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst { Text } = Typography;\n\nconst collapsedRowStyle = {\n    margin: '3px'\n};\n\nconst imageRowStyle = {\n    margin: '10px'\n};\n\nconst iconRowStyle = {\n    marginTop: '10px',\n    marginBottom: '10px',\n    gridColumns: '4'\n};\n\nconst textRowStyle = {\n    margin: '10px'\n};\n\nconst iconStyle = {\n    color: 'white',\n    fontSize: 20\n};\n\nconst textStyle = {\n    margin: '10px',\n    color: 'gray',\n    fontsize: 10,\n    textAlign: 'center'\n};\n\nconst icons = {\n    github: 'https://github.com/ValerieWang628',\n    linkedin: 'https://www.linkedin.com/in/valerieyunziwang628/',\n    youtube: 'https://www.youtube.com/',\n    instagram: 'https://www.instagram.com/'\n};\n\nfunction Avatar(props) {\n    return props.collapsed ? (\n        <Container className=\"avatar\">\n            <Row style={collapsedRowStyle}>\n                <Image\n                    src=\"https://avatars1.githubusercontent.com/u/34406500?s=50&v=4\"\n                    roundedCircle\n                />\n            </Row>\n        </Container>\n    ) : (\n        <Container className=\"avatar\">\n            <Row style={imageRowStyle}>\n                <Image\n                    src=\"https://avatars1.githubusercontent.com/u/34406500?s=150&v=4\"\n                    roundedCircle\n                />\n            </Row>\n            <Row style={iconRowStyle}>\n                {Array.from(Object.entries(icons), entry => (\n                    <Col>\n                        <Icon\n                            type={entry[0]}\n                            theme=\"outlined\"\n                            style={iconStyle}\n                            onClick={onClickOpenLinkInNewTab(entry[1])}\n                        />\n                    </Col>\n                ))}\n            </Row>\n            <Row style={textRowStyle}>\n                <Text type=\"secondary\" style={textStyle}>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                </Text>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Avatar;\n","function onClickOpenLinkInNewTab(link) {\n    return () => window.open(link);\n}\n\nexport { onClickOpenLinkInNewTab };\n","import React, { useState } from 'react';\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport Avatar from './Avatar';\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nfunction App() {\n    const [collapsed, _setCollapse] = useState(false);\n\n    const onCollapse = collapsed => {\n        console.log(collapsed);\n        _setCollapse(collapsed);\n    };\n\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Sider collapsed={collapsed} onCollapse={onCollapse}>\n                <Avatar collapsed={collapsed} />\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                    <Menu.Item key=\"1\">\n                        <Icon type=\"pie-chart\" />\n                        <span>Option 1</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"2\">\n                        <Icon type=\"desktop\" />\n                        <span>Option 2</span>\n                    </Menu.Item>\n                    <SubMenu\n                        key=\"sub1\"\n                        title={\n                            <span>\n                                <Icon type=\"user\" />\n                                <span>User</span>\n                            </span>\n                        }\n                    >\n                        <Menu.Item key=\"3\">Tom</Menu.Item>\n                        <Menu.Item key=\"4\">Bill</Menu.Item>\n                        <Menu.Item key=\"5\">Alex</Menu.Item>\n                    </SubMenu>\n                    <SubMenu\n                        key=\"sub2\"\n                        title={\n                            <span>\n                                <Icon type=\"team\" />\n                                <span>Team</span>\n                            </span>\n                        }\n                    >\n                        <Menu.Item key=\"6\">Team 1</Menu.Item>\n                        <Menu.Item key=\"8\">Team 2</Menu.Item>\n                    </SubMenu>\n                    <Menu.Item key=\"9\">\n                        <Icon type=\"file\" />\n                        <span>File</span>\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Layout>\n                <Header style={{ background: '#fff', padding: 0 }} />\n                <Content style={{ margin: '0 16px' }}>\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>User</Breadcrumb.Item>\n                        <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <div\n                        style={{\n                            padding: 24,\n                            background: '#fff',\n                            minHeight: 360\n                        }}\n                    >\n                        Bill is a cat.\n                    </div>\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>\n                    Ant Design Â©2018 Created by Ant UED\n                </Footer>\n            </Layout>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}